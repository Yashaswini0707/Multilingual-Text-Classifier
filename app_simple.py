from flask import Flask, request, jsonify, render_template, send_from_directory
from flask_cors import CORS
import random
import os

app = Flask(__name__, static_folder="static", template_folder="templates")
CORS(app)

def mock_detect_language(text):
    """Comprehensive Indian language detection"""
    # Kannada
    if any(char in text for char in ['р▓Х', 'р▓Ц', 'р▓Ч', 'р▓Ш', 'р▓Щ', 'р▓Ъ', 'р▓Ы', 'р▓Ь', 'р▓Э', 'р▓Ю', 'р▓Я', 'р▓а', 'р▓б', 'р▓в', 'р▓г', 'р▓д', 'р▓е', 'р▓ж', 'р▓з', 'р▓и', 'р▓к', 'р▓л', 'р▓м', 'р▓н', 'р▓о', 'р▓п', 'р▓░', 'р▓▓', 'р▓╡', 'р▓╢', 'р▓╖', 'р▓╕', 'р▓╣', 'р▓│', 'р│Ю']):
        return "Kannada", 0.95
    
    # Telugu
    elif any(char in text for char in ['р░Е', 'р░Ж', 'р░З', 'р░И', 'р░Й', 'р░К', 'р░Л', 'р▒а', 'р░О', 'р░П', 'р░Р', 'р░Т', 'р░У', 'р░Ф', 'р░Х', 'р░Ц', 'р░Ч', 'р░Ш', 'р░Щ', 'р░Ъ', 'р░Ы', 'р░Ь', 'р░Э', 'р░Ю', 'р░Я', 'р░а', 'р░б', 'р░в', 'р░г', 'р░д', 'р░е', 'р░ж', 'р░з', 'р░и', 'р░к', 'р░л', 'р░м', 'р░н', 'р░о', 'р░п', 'р░░', 'р░▓', 'р░╡', 'р░╢', 'р░╖', 'р░╕', 'р░╣', 'р░│', 'р░▒']):
        return "Telugu", 0.92
    
    # Tamil
    elif any(char in text for char in ['роЕ', 'роЖ', 'роЗ', 'роИ', 'роЙ', 'роК', 'роО', 'роП', 'роР', 'роТ', 'роУ', 'роФ', 'роХ', 'роЩ', 'роЪ', 'роЬ', 'роЮ', 'роЯ', 'рог', 'род', 'рои', 'рой', 'рок', 'роо', 'роп', 'ро░', 'ро▒', 'ро▓', 'ро│', 'ро┤', 'ро╡', 'ро╖', 'ро╕', 'ро╣']):
        return "Tamil", 0.89
    
    # Malayalam
    elif any(char in text for char in ['р┤Е', 'р┤Ж', 'р┤З', 'р┤И', 'р┤Й', 'р┤К', 'р┤Л', 'р┤О', 'р┤П', 'р┤Р', 'р┤Т', 'р┤У', 'р┤Ф', 'р┤Х', 'р┤Ц', 'р┤Ч', 'р┤Ш', 'р┤Щ', 'р┤Ъ', 'р┤Ы', 'р┤Ь', 'р┤Э', 'р┤Ю', 'р┤Я', 'р┤а', 'р┤б', 'р┤в', 'р┤г', 'р┤д', 'р┤е', 'р┤ж', 'р┤з', 'р┤и', 'р┤к', 'р┤л', 'р┤м', 'р┤н', 'р┤о', 'р┤п', 'р┤░', 'р┤▓', 'р┤╡', 'р┤╢', 'р┤╖', 'р┤╕', 'р┤╣', 'р┤│', 'р┤┤', 'р┤▒']):
        return "Malayalam", 0.87
    
    # Hindi/Devanagari
    elif any(char in text for char in ['рдЕ', 'рдЖ', 'рдЗ', 'рдИ', 'рдЙ', 'рдК', 'рдЛ', 'рдП', 'рдР', 'рдУ', 'рдФ', 'рдХ', 'рдЦ', 'рдЧ', 'рдШ', 'рдЩ', 'рдЪ', 'рдЫ', 'рдЬ', 'рдЭ', 'рдЮ', 'рдЯ', 'рда', 'рдб', 'рдв', 'рдг', 'рдд', 'рде', 'рдж', 'рдз', 'рди', 'рдк', 'рдл', 'рдм', 'рдн', 'рдо', 'рдп', 'рд░', 'рд▓', 'рд╡', 'рд╢', 'рд╖', 'рд╕', 'рд╣', 'рд│', 'рдХреНрд╖', 'рдЬреНрдЮ']):
        return "Hindi", 0.94
    
    # Bengali
    elif any(char in text for char in ['ржЕ', 'ржЖ', 'ржЗ', 'ржИ', 'ржЙ', 'ржК', 'ржЛ', 'ржП', 'ржР', 'ржУ', 'ржФ', 'ржХ', 'ржЦ', 'ржЧ', 'ржШ', 'ржЩ', 'ржЪ', 'ржЫ', 'ржЬ', 'ржЭ', 'ржЮ', 'ржЯ', 'ржа', 'ржб', 'ржв', 'ржг', 'ржд', 'рже', 'ржж', 'ржз', 'ржи', 'ржк', 'ржл', 'ржм', 'ржн', 'ржо', 'ржп', 'рж░', 'рж▓', 'рж╢', 'рж╖', 'рж╕', 'рж╣', 'ржбрж╝', 'ржврж╝', 'ржпрж╝']):
        return "Bengali", 0.91
    
    # Gujarati
    elif any(char in text for char in ['ркЕ', 'ркЖ', 'ркЗ', 'ркИ', 'ркЙ', 'ркК', 'ркЛ', 'ркП', 'ркР', 'ркУ', 'ркФ', 'ркХ', 'ркЦ', 'ркЧ', 'ркШ', 'ркЩ', 'ркЪ', 'ркЫ', 'ркЬ', 'ркЭ', 'ркЮ', 'ркЯ', 'рка', 'ркб', 'ркв', 'ркг', 'ркд', 'рке', 'ркж', 'ркз', 'рки', 'ркк', 'ркл', 'ркм', 'ркн', 'рко', 'ркп', 'рк░', 'рк▓', 'рк╡', 'рк╢', 'рк╖', 'рк╕', 'рк╣', 'рк│']):
        return "Gujarati", 0.88
    
    # Punjabi (Gurmukhi)
    elif any(char in text for char in ['риЕ', 'риЖ', 'риЗ', 'риИ', 'риЙ', 'риК', 'риП', 'риР', 'риУ', 'риФ', 'риХ', 'риЦ', 'риЧ', 'риШ', 'риЩ', 'риЪ', 'риЫ', 'риЬ', 'риЭ', 'риЮ', 'риЯ', 'риа', 'риб', 'рив', 'риг', 'рид', 'рие', 'риж', 'риз', 'рии', 'рик', 'рил', 'рим', 'рин', 'рио', 'рип', 'ри░', 'ри▓', 'ри╡', 'ри╕', 'ри╣', 'рйЬ']):
        return "Punjabi", 0.86
    
    # Marathi (keywords)
    elif any(word in text for word in ['рдорд░рд╛рдареА', 'рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░', 'рдкреБрдгреЗ', 'рдореБрдВрдмрдИ']):
        return "Marathi", 0.93
    
    # Urdu
    elif any(char in text for char in ['╪з', '╪и', '╪к', '╪л', '╪м', '╪н', '╪о', '╪п', '╪░', '╪▒', '╪▓', '╪│', '╪┤', '╪╡', '╪╢', '╪╖', '╪╕', '╪╣', '╪║', '┘Б', '┘В', '┌й', '┌п', '┘Д', '┘Е', '┘Ж', '┘И', '█Б', '█М', '█Т']):
        return "Urdu", 0.93
    
    # Assamese
    elif any(char in text for char in ['ржЕ', 'ржЖ', 'ржЗ', 'ржИ', 'ржЙ', 'ржК', 'ржП', 'ржР', 'ржУ', 'ржФ', 'рз░', 'рж▓']):
        return "Assamese", 0.85
    
    # Odia
    elif any(char in text for char in ['рмЕ', 'рмЖ', 'рмЗ', 'рмИ', 'рмЙ', 'рмК', 'рмЛ', 'рмП', 'рмР', 'рмУ', 'рмФ', 'рмХ', 'рмЦ', 'рмЧ', 'рмШ', 'рмЩ', 'рмЪ', 'рмЫ', 'рмЬ', 'рмЭ', 'рмЮ', 'рмЯ', 'рма', 'рмб', 'рмв', 'рмг', 'рмд', 'рме', 'рмж', 'рмз', 'рми', 'рмк', 'рмл', 'рмм', 'рмн', 'рмо', 'рмп', 'рм░', 'рм▓', 'рм╢', 'рм╖', 'рм╕', 'рм╣', 'рмбрм╝', 'рмврм╝', 'рнЯ', 'рн▒']):
        return "Odia", 0.84
    
    # English (keywords)
    elif text.lower() in ['hello', 'hi', 'goodbye', 'thanks', 'please', 'yes', 'no', 'okay', 'welcome']:
        return "English", 0.98
    
    # Unknown
    else:
        languages = ["English", "Hindi", "Kannada", "Telugu", "Tamil", "Malayalam", "Bengali", "Gujarati", "Punjabi", "Marathi", "Urdu", "Assamese", "Odia"]
        return random.choice(languages), random.uniform(0.7, 0.95)

@app.route("/")
def home():
    with open("index.html", "r") as f:   # make sure index.html is in project root
        return f.read()


@app.route('/api/detect', methods=['POST'])
def detect():
    try:
        data = request.get_json()
        text = data.get('text', '')
        
        if not text:
            return jsonify({'error': 'No text provided'}), 400
        
        lang_name, confidence = mock_detect_language(text)
        
        return jsonify({
            'text': text,
            'language': lang_name,
            'confidence': round(confidence, 4),
            'confidence_percentage': round(confidence * 100, 2)
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/samples', methods=['GET'])
def get_samples():
    samples = [
        {"text": "р▓ир▓ор▓╕р│Нр▓Хр▓╛р▓░", "language": "Kannada", "description": "Hello"},
        {"text": "р░ир░ор░╕р▒Нр░Хр░╛р░░р░В", "language": "Telugu", "description": "Hello"},
        {"text": "ро╡рогроХрпНроХроорпН", "language": "Tamil", "description": "Hello"},
        {"text": "р┤ир┤ор┤╕р╡Нр┤Хр┤╛р┤░р┤В", "language": "Malayalam", "description": "Hello"},
        {"text": "рдирдорд╕реНрддреЗ", "language": "Hindi", "description": "Hello"},
        {"text": "ржиржорж╕рзНржХрж╛рж░", "language": "Bengali", "description": "Hello"},
        {"text": "ркиркорк╕рлНркдрлЗ", "language": "Gujarati", "description": "Hello"},
        {"text": "ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓", "language": "Punjabi", "description": "Greeting"},
        {"text": "рдирдорд╕реНрдХрд╛рд░", "language": "Marathi", "description": "Hello"},
        {"text": "╪з┘Д╪│┘Д╪з┘Е ╪╣┘Д█М┌й┘Е", "language": "Urdu", "description": "Peace be upon you"},
        {"text": "ржиржорж╕рзНржХрж╛рз░", "language": "Assamese", "description": "Hello"},
        {"text": "рмирморм╕рнНрмХрм╛рм░", "language": "Odia", "description": "Hello"},
        {"text": "hello", "language": "English", "description": "Greeting"},
        {"text": "рдзрдиреНрдпрд╡рд╛рдж", "language": "Hindi", "description": "Thank you"}
    ]
    return jsonify(samples)

@app.route('/api/health', methods=['GET'])
def health():
    return jsonify({'status': 'healthy', 'mode': 'mock'})

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    print(f"ЁЯЪА Language Detection Tool Starting on port {port}...")
    app.run(host="0.0.0.0", port=port, debug=False)
